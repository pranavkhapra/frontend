{"ast":null,"code":"import { ADD_CLASS, DELETE_CLASS, EDIT_CLASS, GET_ALL_CLASSES, GET_CLASSES_BY_NAME, GET_CLASS_BY_ID, SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\nimport axios from \"axios\";\nimport { addClassURL, allClassesURL, getClassByIDURL, getClassesByNameURL, getDeleteClassURL, getEditClassURL } from \"../config/routes\";\nexport const getAllClasses = () => {\n  return async dispatch => {\n    try {\n      let classes = [];\n      const res = await axios.get(allClassesURL);\n      const {\n        data,\n        success,\n        message\n      } = res.data;\n      classes = data;\n\n      if (success === false) {\n        return dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            message,\n            msg_type: \"danger\"\n          }\n        });\n      }\n\n      return dispatch({\n        type: GET_ALL_CLASSES,\n        payload: {\n          classes\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      return dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message: error.response.data.message,\n          msg_type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const getClassByID = class_id => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(getClassByIDURL(class_id));\n      const {\n        data,\n        success,\n        message\n      } = res.data;\n      const classItem = data;\n\n      if (success === false) {\n        return dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            message,\n            msg_type: \"danger\"\n          }\n        });\n      }\n\n      return dispatch({\n        type: GET_CLASS_BY_ID,\n        payload: {\n          classItem,\n          message,\n          msg_type: \"success\"\n        }\n      });\n    } catch (error) {\n      return dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message: error.response.data.message,\n          msg_type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const getClassesByName = class_name => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(getClassesByNameURL(class_name));\n      const {\n        data,\n        success,\n        message\n      } = res.data;\n      const classes = data;\n\n      if (success === false) {\n        return dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            message,\n            msg_type: \"danger\"\n          }\n        });\n      }\n\n      return dispatch({\n        type: GET_CLASSES_BY_NAME,\n        payload: {\n          classes,\n          message,\n          msg_type: \"success\"\n        }\n      });\n    } catch (error) {\n      return dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message: error.response.data.message,\n          msg_type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const addClass = newClass => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(addClassURL, newClass);\n      const {\n        data,\n        success,\n        message\n      } = res.data;\n      const classItem = data;\n\n      if (success === false) {\n        return dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            message,\n            msg_type: \"danger\"\n          }\n        });\n      }\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message,\n          msg_type: \"success\"\n        }\n      });\n      return dispatch({\n        type: ADD_CLASS,\n        payload: {\n          classItem\n        }\n      });\n    } catch (error) {\n      return dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message: error.response.data.message,\n          msg_type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const editClass = updatedClass => {\n  return async dispatch => {\n    try {\n      const res = await axios.put(getEditClassURL(updatedClass._id), updatedClass);\n      const {\n        data,\n        success,\n        message\n      } = res.data;\n      const classItem = data;\n\n      if (success === false) {\n        return dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            message,\n            msg_type: \"danger\"\n          }\n        });\n      }\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message,\n          msg_type: \"success\"\n        }\n      });\n      return dispatch({\n        type: EDIT_CLASS,\n        payload: {\n          classItem\n        }\n      });\n    } catch (error) {\n      return dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message: error.response.data.message,\n          msg_type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const deleteClass = deletedClassID => {\n  console.log(deletedClassID);\n  return async dispatch => {\n    try {\n      const res = await axios.delete(getDeleteClassURL(deletedClassID));\n      const {\n        data,\n        success,\n        message\n      } = res.data;\n      console.log(data);\n\n      if (success === false) {\n        return dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            message,\n            msg_type: \"danger\"\n          }\n        });\n      }\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message,\n          msg_type: \"success\"\n        }\n      });\n      return dispatch({\n        type: DELETE_CLASS,\n        payload: {\n          deletedClassID\n        }\n      });\n    } catch (error) {\n      return dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          message: error.response.data.message,\n          msg_type: \"danger\"\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/just_a_random_person_to_ignore/React-JS-Student-Management-System-Frontend/src/actions/classActions.js"],"names":["ADD_CLASS","DELETE_CLASS","EDIT_CLASS","GET_ALL_CLASSES","GET_CLASSES_BY_NAME","GET_CLASS_BY_ID","SET_MESSAGE","CLEAR_MESSAGE","axios","addClassURL","allClassesURL","getClassByIDURL","getClassesByNameURL","getDeleteClassURL","getEditClassURL","getAllClasses","dispatch","classes","res","get","data","success","message","type","payload","msg_type","error","console","log","response","getClassByID","class_id","classItem","getClassesByName","class_name","addClass","newClass","post","editClass","updatedClass","put","_id","deleteClass","deletedClassID","delete"],"mappings":"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","sourcesContent":["import {\n    ADD_CLASS,\n    DELETE_CLASS,\n    EDIT_CLASS,\n    GET_ALL_CLASSES,\n    GET_CLASSES_BY_NAME,\n    GET_CLASS_BY_ID,\n    SET_MESSAGE,\n    CLEAR_MESSAGE\n} from \"../actions/types\";\nimport axios from \"axios\";\nimport {\n    addClassURL,\n    allClassesURL,\n    getClassByIDURL,\n    getClassesByNameURL,\n    getDeleteClassURL,\n    getEditClassURL\n} from \"../config/routes\";\n\nexport const getAllClasses = () => {\n    return async (dispatch) => {\n        try {\n            let classes = [];\n            const res = await axios.get(allClassesURL)\n            const {\n                data,\n                success,\n                message\n            } = res.data;\n            classes = data\n\n            if (success === false) {\n                return dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        message,\n                        msg_type: \"danger\"\n                    }\n                })\n            }\n\n            return dispatch({\n                type: GET_ALL_CLASSES,\n                payload: {\n                    classes\n                }\n            })\n        } catch (error) {\n            console.log(error)\n            return dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message: error.response.data.message,\n                    msg_type: \"danger\"\n                }\n            })\n        }\n    }\n}\n\nexport const getClassByID = (class_id) => {\n    return async (dispatch) => {\n        try {\n            const res = await axios.get(getClassByIDURL(class_id))\n            const {\n                data,\n                success,\n                message\n            } = res.data;\n            const classItem = data;\n\n            if (success === false) {\n                return dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        message,\n                        msg_type: \"danger\"\n                    }\n                })\n            }\n\n            return dispatch({\n                type: GET_CLASS_BY_ID,\n                payload: {\n                    classItem,\n                    message,\n                    msg_type: \"success\"\n                }\n            })\n        } catch (error) {\n            return dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message: error.response.data.message,\n                    msg_type: \"danger\"\n                }\n            })\n        }\n    }\n}\n\nexport const getClassesByName = (class_name) => {\n    return async (dispatch) => {\n        try {\n            const res = await axios.get(getClassesByNameURL(class_name))\n            const {\n                data,\n                success,\n                message\n            } = res.data;\n            const classes = data;\n\n            if (success === false) {\n                return dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        message,\n                        msg_type: \"danger\"\n                    }\n                })\n            }\n\n            return dispatch({\n                type: GET_CLASSES_BY_NAME,\n                payload: {\n                    classes,\n                    message,\n                    msg_type: \"success\"\n                }\n            })\n        } catch (error) {\n            return dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message: error.response.data.message,\n                    msg_type: \"danger\"\n                }\n            })\n        }\n    }\n}\n\nexport const addClass = (newClass) => {\n    return async (dispatch) => {\n        try {\n            const res = await axios.post(addClassURL, newClass)\n            const {\n                data,\n                success,\n                message\n            } = res.data;\n            const classItem = data;\n\n            if (success === false) {\n                return dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        message,\n                        msg_type: \"danger\"\n                    }\n                })\n            }\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message,\n                    msg_type: \"success\"\n                }\n            })\n            return dispatch({\n                type: ADD_CLASS,\n                payload: {\n                    classItem\n                }\n            })\n        } catch (error) {\n            return dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message: error.response.data.message,\n                    msg_type: \"danger\"\n                }\n            })\n        }\n    }\n}\n\nexport const editClass = (updatedClass) => {\n    return async (dispatch) => {\n        try {\n            const res = await axios.put(getEditClassURL(updatedClass._id), updatedClass)\n            const {\n                data,\n                success,\n                message\n            } = res.data;\n            const classItem = data;\n\n            if (success === false) {\n                return dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        message,\n                        msg_type: \"danger\"\n                    }\n                })\n            }\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message,\n                    msg_type: \"success\"\n                }\n            })\n            return dispatch({\n                type: EDIT_CLASS,\n                payload: {\n                    classItem\n                }\n            })\n        } catch (error) {\n            return dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message: error.response.data.message,\n                    msg_type: \"danger\"\n                }\n            })\n        }\n    }\n}\n\nexport const deleteClass = (deletedClassID) => {\n    console.log(deletedClassID)\n    return async (dispatch) => {\n        try {\n            const res = await axios.delete(getDeleteClassURL(deletedClassID))\n            const {\n                data,\n                success,\n                message\n            } = res.data;\n\n            console.log(data)\n\n            if (success === false) {\n                return dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        message,\n                        msg_type: \"danger\"\n                    }\n                })\n            }\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message,\n                    msg_type: \"success\"\n                }\n            })\n            return dispatch({\n                type: DELETE_CLASS,\n                payload: {\n                    deletedClassID\n                }\n            })\n        } catch (error) {\n            return dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    message: error.response.data.message,\n                    msg_type: \"danger\"\n                }\n            })\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}